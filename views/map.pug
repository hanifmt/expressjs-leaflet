extends layout

block content
  h1= title
  #sidebar
    //- h1 leaflet-sidebar
    //- include sidebar

  #mapid

  script.
    var mymap = L.map('mapid').setView([51.505, -0.09], 13);
    
    var grayscale = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
      attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
      minZoom: 10,
      maxZoom: 20,
      id: 'mapbox/light-v9',
      tileSize: 512,
      zoomOffset: -1,
      accessToken: 'pk.eyJ1IjoiYWxmaWFuZGY5IiwiYSI6ImNraHZyaWtqMTFpZ3AycnFwaWs4eWpqNmMifQ.FAL0YnUMFbyzCWtE0XIiqA'
    }).addTo(mymap);

    var streets = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
      attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
      minZoom: 10,
      maxZoom: 20,
      id: 'mapbox/streets-v11',
      tileSize: 512,
      zoomOffset: -1,
      accessToken: 'pk.eyJ1IjoiYWxmaWFuZGY5IiwiYSI6ImNraHZyaWtqMTFpZ3AycnFwaWs4eWpqNmMifQ.FAL0YnUMFbyzCWtE0XIiqA'
    }).addTo(mymap);

    var drawnItems = L.featureGroup().addTo(mymap);

    L.control.layers({
      "Grayscale": grayscale,
      "Streets": streets
    }, 
    { 
      'drawlayer': drawnItems,
    },
    { 
      position: 'topright', collapsed: true 
    }).addTo(mymap);

    //- Draw Toolbar
    mymap.addControl(new L.Control.Draw({
      edit: {
          featureGroup: drawnItems,
          poly: {
            allowIntersection: false
          }
      },
      draw: {
          polygon: {
            allowIntersection: false,
            showArea: true
          }
      },
      position: 'bottomright',
    }));

    // Truncate value based on number of decimals
    var _round = function(num, len) {
      return Math.round(num*(Math.pow(10, len)))/(Math.pow(10, len));
    };
    // Helper method to format LatLng object (x.xxxxxx, y.yyyyyy)
    var strLatLng = function(latlng) {
      return "("+_round(latlng.lat, 6)+", "+_round(latlng.lng, 6)+")";
    };

    // Generate popup content based on layer type
    // - Returns HTML string, or null if unknown object
    var getPopupContent = function(layer) {
      // Marker - add lat/long
      if (layer instanceof L.Marker || layer instanceof L.CircleMarker) {
        return strLatLng(layer.getLatLng());
      // Circle - lat/long, radius
      } else if (layer instanceof L.Circle) {
        var center = layer.getLatLng(),
          radius = layer.getRadius();
        return "Center: "+strLatLng(center)+"<br />"
          +"Radius: "+_round(radius, 2)+" m";
      // Rectangle/Polygon - area
      } else if (layer instanceof L.Polygon) {
        var latlngs = layer._defaultShape ? layer._defaultShape() : layer.getLatLngs(),
          area = L.GeometryUtil.geodesicArea(latlngs);
        return "Area: "+L.GeometryUtil.readableArea(area, true);
      // Polyline - distance
      } else if (layer instanceof L.Polyline) {
        var latlngs = layer._defaultShape ? layer._defaultShape() : layer.getLatLngs(),
          distance = 0;
        if (latlngs.length < 2) {
          return "Distance: N/A";
        } else {
          for (var i = 0; i < latlngs.length-1; i++) {
            distance += latlngs[i].distanceTo(latlngs[i+1]);
          }
          return "Distance: "+_round(distance, 2)+" m";
        }
      }
      return null;
    };

    //- Sidebar
    var sidebar = L.control.sidebar('sidebar', {
      position: 'left'
    });
    mymap.addControl(sidebar);

    mymap.on('click', function () {
      sidebar.hide();
    })

    // Object created - bind popup to layer, add to feature group
    mymap.on(L.Draw.Event.CREATED, function (event) {
      var layer = event.layer;
      var content = getPopupContent(layer);

      if (content !== null) {
        layer.bindPopup(content).on('click', function() {
          $("#sidebar").empty();
          $.ajax({
            type: "POST",
            url: '/map/sidebar',
            data:{
              data : content
            },
            success:function(html){
              $("#sidebar").html(html);
              sidebar.show();
            },
          })
        });
      }
      drawnItems.addLayer(layer);        
    });

    // Object(s) edited - update popups
    mymap.on(L.Draw.Event.EDITED, function(event) {
      var layers = event.layers;
      var content = null;
      layers.eachLayer(function(layer) {
        content = getPopupContent(layer);
        if (content !== null) {
          layer.setPopupContent(content);
        }
      });
    });



    //Create marker by parameter
    var latlong = !{JSON.stringify(manhole)};

    latlong.forEach(function(item,index){
      //- console.log(item)
      markerFunc(item);
    })

    function markerFunc(latlong){
      var marker = L.marker(latlong).bindPopup(JSON.stringify(latlong)).on('click', function() {
        $("#sidebar").empty();
        $.ajax({
          type: "POST",
          url: '/map/sidebar',
          data:{
            data : JSON.stringify(latlong)
          },
          success:function(html){
            $("#sidebar").html(html);
            sidebar.show();
          },
        })
      }).addTo(mymap);
    }
    

    //Create polygon
    var polygonPoints = [
        [51.505, -0.09],
        [51.505, -0.08],
        [51.5006, -0.08],
        [51.5005, -0.09]];

    var polygon = L.polygon(polygonPoints).bindPopup(JSON.stringify(polygonPoints)).on('click', function() {
      $("#sidebar").empty();
      $.ajax({
        type: "POST",
        url: '/map/sidebar',
        data:{
          data : JSON.stringify(polygonPoints)
        },
        success:function(html){
          $("#sidebar").html(html);
          sidebar.show();
        },
      })
    }).addTo(mymap);